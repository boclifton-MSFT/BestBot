param(
    [Parameter()]
    [string]$ResourceGroupName,

    [Parameter()]
    [string]$FunctionAppName,

    [Parameter(Mandatory = $true)]
    [string]$PackagePath,

    [Parameter()]
    [string]$SubscriptionId,

    [int]$TimeoutSeconds = 600,

    [int]$PollIntervalSeconds = 5
)

$ErrorActionPreference = 'Stop'

$script:azdCliChecked = $false
$script:azdCliAvailable = $false

function Write-Log {
    param (
        [string]$Message
    )
    $timestamp = (Get-Date).ToString('s')
    Write-Host "[$timestamp] $Message"
}

function Get-AzdEnvValue {
    param(
        [Parameter(Mandatory = $true)]
        [string]$Key
    )

    if (-not $script:azdCliChecked) {
        $script:azdCliAvailable = [bool](Get-Command azd -ErrorAction SilentlyContinue)
        if (-not $script:azdCliAvailable) {
            Write-Log "Azure Developer CLI (azd) not found on PATH; skipping environment lookup for '$Key'."
        }
        $script:azdCliChecked = $true
    }

    if (-not $script:azdCliAvailable) {
        return $null
    }

    $result = & azd env get-value $Key 2>$null
    if ($LASTEXITCODE -ne 0) {
        return $null
    }

    $value = ($result | Out-String).Trim()
    if ([string]::IsNullOrWhiteSpace($value)) {
        return $null
    }

    return $value
}

if (-not (Test-Path -LiteralPath $PackagePath)) {
    throw "PackagePath '$PackagePath' not found. Provide a path to a .zip generated by 'func azure functionapp publish --zip' or 'dotnet publish'."
}

if (-not $ResourceGroupName) {
    $ResourceGroupName = Get-AzdEnvValue -Key 'AZURE_RESOURCE_GROUP'
    if ($ResourceGroupName) {
        Write-Log "Using resource group from azd environment: '$ResourceGroupName'."
    }
}

if (-not $FunctionAppName) {
    $FunctionAppName = Get-AzdEnvValue -Key 'AZURE_FUNCTIONAPP_NAME'
    if ($FunctionAppName) {
        Write-Log "Using function app name from azd environment: '$FunctionAppName'."
    }
}

if (-not $SubscriptionId) {
    $SubscriptionId = Get-AzdEnvValue -Key 'AZURE_SUBSCRIPTION_ID'
    if ($SubscriptionId) {
        Write-Log "Using subscription from azd environment: '$SubscriptionId'."
    }
}

if (-not $ResourceGroupName) {
    throw "Resource group name is required. Provide -ResourceGroupName or ensure AZURE_RESOURCE_GROUP is set via 'azd env set'."
}

if (-not $FunctionAppName) {
    throw "Function app name is required. Provide -FunctionAppName or ensure AZURE_FUNCTIONAPP_NAME is available in the azd environment."
}

if ($SubscriptionId) {
    Write-Log "Setting Azure subscription context to '$SubscriptionId'."
    az account set --subscription $SubscriptionId | Out-Null
}

Write-Log "Retrieving publishing credentials for Function App '$FunctionAppName'."
$publishProfileJson = az functionapp deployment list-publishing-credentials --name $FunctionAppName --resource-group $ResourceGroupName --output json
$publishProfile = $publishProfileJson | ConvertFrom-Json

if (-not $publishProfile) {
    throw "Unable to retrieve publishing credentials. Ensure the function app exists and you have 'Microsoft.Web/sites/publish/action' permission."
}

$scmBaseUri = $publishProfile.scmUri.TrimEnd('/')
$zipDeployUri = "$scmBaseUri/api/zipdeploy"
$statusUri = "$scmBaseUri/api/deployments/latest"

$authPair = "{0}:{1}" -f $publishProfile.publishingUserName, $publishProfile.publishingPassword
$basicAuth = "Basic " + [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($authPair))
$headers = @{ Authorization = $basicAuth }

Write-Log "Initiating zip deploy to '$zipDeployUri'."
$response = Invoke-WebRequest -Uri $zipDeployUri -Headers $headers -Method Post -InFile $PackagePath -ContentType 'application/zip' -TimeoutSec $TimeoutSeconds -PassThru

if ($response.StatusCode -notin 200, 202) {
    throw "Zip deploy request failed with status code $($response.StatusCode): $($response.StatusDescription)"
}

if ($response.Headers['Location']) {
    $statusUri = $response.Headers['Location']
}

Write-Log "Polling deployment status from '$statusUri'."
$deadline = (Get-Date).AddSeconds($TimeoutSeconds)

while ($true) {
    if (Get-Date -gt $deadline) {
        throw "Deployment did not complete within $TimeoutSeconds seconds."
    }

    Start-Sleep -Seconds $PollIntervalSeconds

    $statusResponse = Invoke-WebRequest -Uri $statusUri -Headers $headers -Method Get -TimeoutSec $PollIntervalSeconds
    $statusBody = $statusResponse.Content | ConvertFrom-Json

    $currentStatus = $statusBody.status
    $progressMsg = if ($statusBody.progress) { $statusBody.progress } else { $statusBody.message }
    Write-Log "Status: $currentStatus. $progressMsg"

    switch ($currentStatus.ToLower()) {
        'success' {
            Write-Log "Zip deploy completed successfully."
            if ($statusBody.end_time) {
                Write-Log "Completed at $($statusBody.end_time)."
            }
            return
        }
        'failed' {
            $detail = if ($statusBody.details) { $statusBody.details } elseif ($statusBody.message) { $statusBody.message } else { 'No additional error details returned.' }
            throw "Zip deploy failed: $detail"
        }
    }
}
